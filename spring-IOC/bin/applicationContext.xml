<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- 
		配置bean
		class: bean的全类名,通过反射的方式在IOC容器中创建Bean.所以要求Bean中必须有无参数的构造器.
		id: 标识容器中的bean. id唯一. 
	-->
	
	<!-- 通过属性配置 -->
	<bean id="helloWorld" class="com.xxx.spring.beans.HelloWorld">
		<property name="name2" value="Spring"></property>
	</bean>
	
	<!-- 通过构造方法配置  可以指定参数的位置和参数的类型,以区分重载的构造方法-->
	<bean id="car" class="com.xxx.spring.beans.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg value="ShangHai" index="1"></constructor-arg>
		<constructor-arg value="300000" type="double"></constructor-arg>
	</bean>
	
	<!-- 属性值value也可以通过子节点进行配置 -->
	<!-- 如果字面值包含特殊字符可以使用<![CDATA[]> 包裹起来 -->
	<bean id="car2" class="com.xxx.spring.beans.Car">
		<constructor-arg value="BMW" type="java.lang.String"></constructor-arg>
		<!--为字符串或引用类型的属性注入null值 
		<constructor-arg><null/></constructor-arg>
		 -->
		<constructor-arg type="java.lang.String">
			<value><![CDATA[<^BeiJing^>]]></value> 
		</constructor-arg>
		<constructor-arg value="240" type="int"></constructor-arg>
	</bean>
	
	<bean id="person" class="com.xxx.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="10"></property>
		<!-- 可以使用property的ref属性建立bean之间的引用关系 -->
		<property name="car" ref="car2"></property>
		<!-- 支持级联属性赋值,注意:属性需要先初始化后才可以为级联属性赋值. -->
		<property name="car.price" value="500000"></property>
		
		<!-- 元素方式配置
			<property name="car">
				<ref bean="car2"/>
			</property> 
		 -->
	 
		 <!-- 内部bean,不能被外部引用,只能在内部使用,也可以用construcor-arg包裹
			<property name="car">
				<bean class="com.xxx.spring.beans.Car">
					<constructor-arg value="Ford"></constructor-arg>
					<constructor-arg value="ChangAn"></constructor-arg>
					<constructor-arg value="200000" type="double"></constructor-arg>
				</bean>
			</property>
		-->
	</bean>
	
	<!-- 测试如何配置集合属性 -->
	<bean id="person3" class="com.xxx.spring.beans.collections.Person">
		<property name="name" value="Mike"></property>
		<property name="age" value="27"></property>
		<property name="cars">
		<!-- 配置List -->
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
				<bean class="com.xxx.spring.beans.Car">
					<constructor-arg value="Ford"></constructor-arg>
					<constructor-arg value="ChangAn"></constructor-arg>
					<constructor-arg value="200000" type="double"></constructor-arg>
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- 配置Map -->
	<bean id="newPerson" class="com.xxx.spring.beans.collections.NewPerson">
		<property name="name" value="Rose"></property>
		<property name="age" value="20"></property>
		<property name="cars">
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置Properties -->
	<bean id="dataSource" class="com.xxx.spring.beans.collections.DataSource">
		<property name="properties">
			<props>
				<prop key="user">root</prop>
				<prop key="password">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql:///test</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置单例的集合bean, 以供多个bean进行引用,需要导入util命名空间 -->
	<util:list id="cars"> 
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<bean id="person4" class="com.xxx.spring.beans.collections.Person">
		<property name="name" value="Jack"></property>
		<property name="age" value="30"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- 通过p命名空间为bean的属性赋值,需要先导入p命名空间. 相对于传统的配置方式更加的简介.-->
	<bean id="person5" class="com.xxx.spring.beans.collections.Person" p:age="10" p:name="Queen" 
	p:cars-ref="cars"></bean>
	
</beans>
